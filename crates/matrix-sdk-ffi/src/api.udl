namespace sdk {
    [Throws=ClientError]
    Client login_new_client(string base_path, string username, string password);
    [Throws=ClientError]
    Client guest_client(string base_path, string homeserver);
    [Throws=ClientError]
    Client login_with_token(string base_path, string restore_token);
};

[Error]
interface ClientError {
  Generic(string msg);
};

interface Message {
    string id();
    string message_type();
    string content();
    string sender();
    u64 origin_server_ts();
};

callback interface RoomDelegate {
    void did_paginate_backwards(sequence<Message> messages);
    void did_receive_message(Message message);
};

interface BackwardsStream {
    sequence<Message> paginate_backwards(u8 count);
};

interface Room {

    void set_delegate(RoomDelegate? delegate);

    string id();
    
    [Throws=ClientError]
    string display_name();
    
    [Throws=ClientError]
    sequence<u8> avatar();

    string? avatar_url();

    boolean is_direct();

    boolean is_public();

    boolean is_space();

    boolean is_encrypted();

    string? name();

    string? topic();

    BackwardsStream? start_live_event_listener();

    void stop_live_event_listener();
};

callback interface ClientDelegate {
    void did_receive_sync_update();
};

interface Client {

    void set_delegate(ClientDelegate? delegate);

    void start_sync();

    [Throws=ClientError]
    string restore_token();
    boolean is_guest();
    boolean has_first_synced();
    boolean is_syncing();
    [Throws=ClientError]
    string user_id();
    [Throws=ClientError]
    string display_name();
    [Throws=ClientError]
    string device_id();
    [Throws=ClientError]
    sequence<u8> avatar();
    sequence<Room> conversations();
};
