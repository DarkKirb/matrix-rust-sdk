initSidebarItems({"enum":[["CryptoStoreError","The crypto store’s error type."],["PicklingMode","Used for setting the encryption parameter for pickling (serialisation) functions. `Unencrypted` is functionally equivalent to `Encrypted{key: [].to_vec() }`, but is much more clear. Pickling modes have to be equivalent for pickling and unpickling operations to succeed. `Encrypted` takes ownership of `key`, in order to properly destroy it after use."],["SecretImportError","Error describing what went wrong when importing private cross signing keys or the key backup key."],["SecretInfo","An enum over the various secret request types we can have."]],"mod":[["caches","Collection of small in-memory stores that can be used to cache Olm objects."],["integration_tests",""]],"struct":[["BackupKeys","Stored versions of the backup keys."],["Changes",""],["CrossSigningKeyExport","A struct containing private cross signing keys that can be backed up or uploaded to the secret store."],["DeviceChanges",""],["EncryptedPickleKey","An encrypted version of our pickle key, this can be safely stored in a database."],["GossipRequest","A struct describing an outgoing key request."],["IdentityChanges",""],["IdentityKeys","Struct representing the parsed result of [`OlmAccount::identity_keys()`]."],["MemoryStore","An in-memory only store that will forget all the E2EE key once it’s dropped."],["PickleKey","A pickle key that will be used to encrypt all the private keys for Olm."],["RoomKeyCounts","Struct holding info about how many room keys the store has."],["Store","A wrapper for our CryptoStore trait object."]],"trait":[["CryptoStore","Trait abstracting a store that the `OlmMachine` uses to store cryptographic keys."]],"type":[["Result","A `CryptoStore` specific result type."]]});